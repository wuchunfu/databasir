/*
 * This file is generated by jOOQ.
 */
package com.databasir.web.persist.tables;


import com.databasir.web.persist.Databasir;
import com.databasir.web.persist.Keys;
import com.databasir.web.persist.tables.records.TableMetaRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TableMeta extends TableImpl<TableMetaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>databasir.table_meta</code>
     */
    public static final TableMeta TABLE_META = new TableMeta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TableMetaRecord> getRecordType() {
        return TableMetaRecord.class;
    }

    /**
     * The column <code>databasir.table_meta.id</code>.
     */
    public final TableField<TableMetaRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>databasir.table_meta.schema_meta_id</code>.
     */
    public final TableField<TableMetaRecord, Integer> SCHEMA_META_ID = createField(DSL.name("schema_meta_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.table_meta.name</code>.
     */
    public final TableField<TableMetaRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>databasir.table_meta.type</code>.
     */
    public final TableField<TableMetaRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>databasir.table_meta.comment</code>.
     */
    public final TableField<TableMetaRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>databasir.table_meta.create_at</code>.
     */
    public final TableField<TableMetaRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private TableMeta(Name alias, Table<TableMetaRecord> aliased) {
        this(alias, aliased, null);
    }

    private TableMeta(Name alias, Table<TableMetaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>databasir.table_meta</code> table reference
     */
    public TableMeta(String alias) {
        this(DSL.name(alias), TABLE_META);
    }

    /**
     * Create an aliased <code>databasir.table_meta</code> table reference
     */
    public TableMeta(Name alias) {
        this(alias, TABLE_META);
    }

    /**
     * Create a <code>databasir.table_meta</code> table reference
     */
    public TableMeta() {
        this(DSL.name("table_meta"), null);
    }

    public <O extends Record> TableMeta(Table<O> child, ForeignKey<O, TableMetaRecord> key) {
        super(child, key, TABLE_META);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Databasir.DATABASIR;
    }

    @Override
    public Identity<TableMetaRecord, Integer> getIdentity() {
        return (Identity<TableMetaRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TableMetaRecord> getPrimaryKey() {
        return Keys.KEY_TABLE_META_PRIMARY;
    }

    @Override
    public TableMeta as(String alias) {
        return new TableMeta(DSL.name(alias), this);
    }

    @Override
    public TableMeta as(Name alias) {
        return new TableMeta(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TableMeta rename(String name) {
        return new TableMeta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TableMeta rename(Name name) {
        return new TableMeta(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, String, String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
