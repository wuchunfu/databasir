/*
 * This file is generated by jOOQ.
 */
package com.databasir.web.persist.tables.records;


import com.databasir.web.persist.tables.SchemaSourceMetaRule;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemaSourceMetaRuleRecord extends UpdatableRecordImpl<SchemaSourceMetaRuleRecord> implements Record6<Integer, Integer, JSON, JSON, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>databasir.schema_source_meta_rule.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>databasir.schema_source_meta_rule.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for
     * <code>databasir.schema_source_meta_rule.schema_source_id</code>.
     */
    public void setSchemaSourceId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>databasir.schema_source_meta_rule.schema_source_id</code>.
     */
    public Integer getSchemaSourceId() {
        return (Integer) get(1);
    }

    /**
     * Setter for
     * <code>databasir.schema_source_meta_rule.ignore_table_name_regex_array</code>.
     */
    public void setIgnoreTableNameRegexArray(JSON value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>databasir.schema_source_meta_rule.ignore_table_name_regex_array</code>.
     */
    public JSON getIgnoreTableNameRegexArray() {
        return (JSON) get(2);
    }

    /**
     * Setter for
     * <code>databasir.schema_source_meta_rule.ignore_column_name_regex_array</code>.
     */
    public void setIgnoreColumnNameRegexArray(JSON value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>databasir.schema_source_meta_rule.ignore_column_name_regex_array</code>.
     */
    public JSON getIgnoreColumnNameRegexArray() {
        return (JSON) get(3);
    }

    /**
     * Setter for <code>databasir.schema_source_meta_rule.update_at</code>.
     */
    public void setUpdateAt(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>databasir.schema_source_meta_rule.update_at</code>.
     */
    public LocalDateTime getUpdateAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>databasir.schema_source_meta_rule.create_at</code>.
     */
    public void setCreateAt(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>databasir.schema_source_meta_rule.create_at</code>.
     */
    public LocalDateTime getCreateAt() {
        return (LocalDateTime) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, JSON, JSON, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Integer, Integer, JSON, JSON, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return SchemaSourceMetaRule.SCHEMA_SOURCE_META_RULE.ID;
    }

    @Override
    public Field<Integer> field2() {
        return SchemaSourceMetaRule.SCHEMA_SOURCE_META_RULE.SCHEMA_SOURCE_ID;
    }

    @Override
    public Field<JSON> field3() {
        return SchemaSourceMetaRule.SCHEMA_SOURCE_META_RULE.IGNORE_TABLE_NAME_REGEX_ARRAY;
    }

    @Override
    public Field<JSON> field4() {
        return SchemaSourceMetaRule.SCHEMA_SOURCE_META_RULE.IGNORE_COLUMN_NAME_REGEX_ARRAY;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return SchemaSourceMetaRule.SCHEMA_SOURCE_META_RULE.UPDATE_AT;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return SchemaSourceMetaRule.SCHEMA_SOURCE_META_RULE.CREATE_AT;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getSchemaSourceId();
    }

    @Override
    public JSON component3() {
        return getIgnoreTableNameRegexArray();
    }

    @Override
    public JSON component4() {
        return getIgnoreColumnNameRegexArray();
    }

    @Override
    public LocalDateTime component5() {
        return getUpdateAt();
    }

    @Override
    public LocalDateTime component6() {
        return getCreateAt();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getSchemaSourceId();
    }

    @Override
    public JSON value3() {
        return getIgnoreTableNameRegexArray();
    }

    @Override
    public JSON value4() {
        return getIgnoreColumnNameRegexArray();
    }

    @Override
    public LocalDateTime value5() {
        return getUpdateAt();
    }

    @Override
    public LocalDateTime value6() {
        return getCreateAt();
    }

    @Override
    public SchemaSourceMetaRuleRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public SchemaSourceMetaRuleRecord value2(Integer value) {
        setSchemaSourceId(value);
        return this;
    }

    @Override
    public SchemaSourceMetaRuleRecord value3(JSON value) {
        setIgnoreTableNameRegexArray(value);
        return this;
    }

    @Override
    public SchemaSourceMetaRuleRecord value4(JSON value) {
        setIgnoreColumnNameRegexArray(value);
        return this;
    }

    @Override
    public SchemaSourceMetaRuleRecord value5(LocalDateTime value) {
        setUpdateAt(value);
        return this;
    }

    @Override
    public SchemaSourceMetaRuleRecord value6(LocalDateTime value) {
        setCreateAt(value);
        return this;
    }

    @Override
    public SchemaSourceMetaRuleRecord values(Integer value1, Integer value2, JSON value3, JSON value4, LocalDateTime value5, LocalDateTime value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SchemaSourceMetaRuleRecord
     */
    public SchemaSourceMetaRuleRecord() {
        super(SchemaSourceMetaRule.SCHEMA_SOURCE_META_RULE);
    }

    /**
     * Create a detached, initialised SchemaSourceMetaRuleRecord
     */
    public SchemaSourceMetaRuleRecord(Integer id, Integer schemaSourceId, JSON ignoreTableNameRegexArray, JSON ignoreColumnNameRegexArray, LocalDateTime updateAt, LocalDateTime createAt) {
        super(SchemaSourceMetaRule.SCHEMA_SOURCE_META_RULE);

        setId(id);
        setSchemaSourceId(schemaSourceId);
        setIgnoreTableNameRegexArray(ignoreTableNameRegexArray);
        setIgnoreColumnNameRegexArray(ignoreColumnNameRegexArray);
        setUpdateAt(updateAt);
        setCreateAt(createAt);
    }

    /**
     * Create a detached, initialised SchemaSourceMetaRuleRecord
     */
    public SchemaSourceMetaRuleRecord(com.databasir.web.persist.tables.pojos.SchemaSourceMetaRule value) {
        super(SchemaSourceMetaRule.SCHEMA_SOURCE_META_RULE);

        if (value != null) {
            setId(value.getId());
            setSchemaSourceId(value.getSchemaSourceId());
            setIgnoreTableNameRegexArray(value.getIgnoreTableNameRegexArray());
            setIgnoreColumnNameRegexArray(value.getIgnoreColumnNameRegexArray());
            setUpdateAt(value.getUpdateAt());
            setCreateAt(value.getCreateAt());
        }
    }
}
