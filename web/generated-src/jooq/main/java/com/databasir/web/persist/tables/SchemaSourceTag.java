/*
 * This file is generated by jOOQ.
 */
package com.databasir.web.persist.tables;


import com.databasir.web.persist.Databasir;
import com.databasir.web.persist.Keys;
import com.databasir.web.persist.tables.records.SchemaSourceTagRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemaSourceTag extends TableImpl<SchemaSourceTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>databasir.schema_source_tag</code>
     */
    public static final SchemaSourceTag SCHEMA_SOURCE_TAG = new SchemaSourceTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchemaSourceTagRecord> getRecordType() {
        return SchemaSourceTagRecord.class;
    }

    /**
     * The column <code>databasir.schema_source_tag.id</code>.
     */
    public final TableField<SchemaSourceTagRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>databasir.schema_source_tag.schema_source_id</code>.
     */
    public final TableField<SchemaSourceTagRecord, Integer> SCHEMA_SOURCE_ID = createField(DSL.name("schema_source_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.schema_source_tag.tag_id</code>.
     */
    public final TableField<SchemaSourceTagRecord, Integer> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.schema_source_tag.create_at</code>.
     */
    public final TableField<SchemaSourceTagRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private SchemaSourceTag(Name alias, Table<SchemaSourceTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private SchemaSourceTag(Name alias, Table<SchemaSourceTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>databasir.schema_source_tag</code> table
     * reference
     */
    public SchemaSourceTag(String alias) {
        this(DSL.name(alias), SCHEMA_SOURCE_TAG);
    }

    /**
     * Create an aliased <code>databasir.schema_source_tag</code> table
     * reference
     */
    public SchemaSourceTag(Name alias) {
        this(alias, SCHEMA_SOURCE_TAG);
    }

    /**
     * Create a <code>databasir.schema_source_tag</code> table reference
     */
    public SchemaSourceTag() {
        this(DSL.name("schema_source_tag"), null);
    }

    public <O extends Record> SchemaSourceTag(Table<O> child, ForeignKey<O, SchemaSourceTagRecord> key) {
        super(child, key, SCHEMA_SOURCE_TAG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Databasir.DATABASIR;
    }

    @Override
    public Identity<SchemaSourceTagRecord, Integer> getIdentity() {
        return (Identity<SchemaSourceTagRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SchemaSourceTagRecord> getPrimaryKey() {
        return Keys.KEY_SCHEMA_SOURCE_TAG_PRIMARY;
    }

    @Override
    public List<UniqueKey<SchemaSourceTagRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SCHEMA_SOURCE_TAG_UK_DATABASE_TAG);
    }

    @Override
    public SchemaSourceTag as(String alias) {
        return new SchemaSourceTag(DSL.name(alias), this);
    }

    @Override
    public SchemaSourceTag as(Name alias) {
        return new SchemaSourceTag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemaSourceTag rename(String name) {
        return new SchemaSourceTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemaSourceTag rename(Name name) {
        return new SchemaSourceTag(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
