/*
 * This file is generated by jOOQ.
 */
package com.databasir.web.persist.tables;


import com.databasir.web.persist.Databasir;
import com.databasir.web.persist.Keys;
import com.databasir.web.persist.tables.records.SchemaSourceMetaRuleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemaSourceMetaRule extends TableImpl<SchemaSourceMetaRuleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>databasir.schema_source_meta_rule</code>
     */
    public static final SchemaSourceMetaRule SCHEMA_SOURCE_META_RULE = new SchemaSourceMetaRule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchemaSourceMetaRuleRecord> getRecordType() {
        return SchemaSourceMetaRuleRecord.class;
    }

    /**
     * The column <code>databasir.schema_source_meta_rule.id</code>.
     */
    public final TableField<SchemaSourceMetaRuleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>databasir.schema_source_meta_rule.schema_source_id</code>.
     */
    public final TableField<SchemaSourceMetaRuleRecord, Integer> SCHEMA_SOURCE_ID = createField(DSL.name("schema_source_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>databasir.schema_source_meta_rule.ignore_table_name_regex_array</code>.
     */
    public final TableField<SchemaSourceMetaRuleRecord, JSON> IGNORE_TABLE_NAME_REGEX_ARRAY = createField(DSL.name("ignore_table_name_regex_array"), SQLDataType.JSON.nullable(false), this, "");

    /**
     * The column
     * <code>databasir.schema_source_meta_rule.ignore_column_name_regex_array</code>.
     */
    public final TableField<SchemaSourceMetaRuleRecord, JSON> IGNORE_COLUMN_NAME_REGEX_ARRAY = createField(DSL.name("ignore_column_name_regex_array"), SQLDataType.JSON.nullable(false), this, "");

    /**
     * The column <code>databasir.schema_source_meta_rule.update_at</code>.
     */
    public final TableField<SchemaSourceMetaRuleRecord, LocalDateTime> UPDATE_AT = createField(DSL.name("update_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>databasir.schema_source_meta_rule.create_at</code>.
     */
    public final TableField<SchemaSourceMetaRuleRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private SchemaSourceMetaRule(Name alias, Table<SchemaSourceMetaRuleRecord> aliased) {
        this(alias, aliased, null);
    }

    private SchemaSourceMetaRule(Name alias, Table<SchemaSourceMetaRuleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>databasir.schema_source_meta_rule</code> table
     * reference
     */
    public SchemaSourceMetaRule(String alias) {
        this(DSL.name(alias), SCHEMA_SOURCE_META_RULE);
    }

    /**
     * Create an aliased <code>databasir.schema_source_meta_rule</code> table
     * reference
     */
    public SchemaSourceMetaRule(Name alias) {
        this(alias, SCHEMA_SOURCE_META_RULE);
    }

    /**
     * Create a <code>databasir.schema_source_meta_rule</code> table reference
     */
    public SchemaSourceMetaRule() {
        this(DSL.name("schema_source_meta_rule"), null);
    }

    public <O extends Record> SchemaSourceMetaRule(Table<O> child, ForeignKey<O, SchemaSourceMetaRuleRecord> key) {
        super(child, key, SCHEMA_SOURCE_META_RULE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Databasir.DATABASIR;
    }

    @Override
    public Identity<SchemaSourceMetaRuleRecord, Integer> getIdentity() {
        return (Identity<SchemaSourceMetaRuleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SchemaSourceMetaRuleRecord> getPrimaryKey() {
        return Keys.KEY_SCHEMA_SOURCE_META_RULE_PRIMARY;
    }

    @Override
    public List<UniqueKey<SchemaSourceMetaRuleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SCHEMA_SOURCE_META_RULE_UK_SCHEMA_SOURCE_ID);
    }

    @Override
    public SchemaSourceMetaRule as(String alias) {
        return new SchemaSourceMetaRule(DSL.name(alias), this);
    }

    @Override
    public SchemaSourceMetaRule as(Name alias) {
        return new SchemaSourceMetaRule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemaSourceMetaRule rename(String name) {
        return new SchemaSourceMetaRule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemaSourceMetaRule rename(Name name) {
        return new SchemaSourceMetaRule(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, JSON, JSON, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
