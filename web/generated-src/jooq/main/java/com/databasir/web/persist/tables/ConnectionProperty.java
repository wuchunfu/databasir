/*
 * This file is generated by jOOQ.
 */
package com.databasir.web.persist.tables;


import com.databasir.web.persist.Databasir;
import com.databasir.web.persist.Keys;
import com.databasir.web.persist.tables.records.ConnectionPropertyRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConnectionProperty extends TableImpl<ConnectionPropertyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>databasir.connection_property</code>
     */
    public static final ConnectionProperty CONNECTION_PROPERTY = new ConnectionProperty();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConnectionPropertyRecord> getRecordType() {
        return ConnectionPropertyRecord.class;
    }

    /**
     * The column <code>databasir.connection_property.id</code>.
     */
    public final TableField<ConnectionPropertyRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>databasir.connection_property.connection_id</code>.
     */
    public final TableField<ConnectionPropertyRecord, Integer> CONNECTION_ID = createField(DSL.name("connection_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.connection_property.key</code>.
     */
    public final TableField<ConnectionPropertyRecord, String> KEY = createField(DSL.name("key"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>databasir.connection_property.value</code>.
     */
    public final TableField<ConnectionPropertyRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>databasir.connection_property.create_at</code>.
     */
    public final TableField<ConnectionPropertyRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private ConnectionProperty(Name alias, Table<ConnectionPropertyRecord> aliased) {
        this(alias, aliased, null);
    }

    private ConnectionProperty(Name alias, Table<ConnectionPropertyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>databasir.connection_property</code> table
     * reference
     */
    public ConnectionProperty(String alias) {
        this(DSL.name(alias), CONNECTION_PROPERTY);
    }

    /**
     * Create an aliased <code>databasir.connection_property</code> table
     * reference
     */
    public ConnectionProperty(Name alias) {
        this(alias, CONNECTION_PROPERTY);
    }

    /**
     * Create a <code>databasir.connection_property</code> table reference
     */
    public ConnectionProperty() {
        this(DSL.name("connection_property"), null);
    }

    public <O extends Record> ConnectionProperty(Table<O> child, ForeignKey<O, ConnectionPropertyRecord> key) {
        super(child, key, CONNECTION_PROPERTY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Databasir.DATABASIR;
    }

    @Override
    public Identity<ConnectionPropertyRecord, Integer> getIdentity() {
        return (Identity<ConnectionPropertyRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ConnectionPropertyRecord> getPrimaryKey() {
        return Keys.KEY_CONNECTION_PROPERTY_PRIMARY;
    }

    @Override
    public ConnectionProperty as(String alias) {
        return new ConnectionProperty(DSL.name(alias), this);
    }

    @Override
    public ConnectionProperty as(Name alias) {
        return new ConnectionProperty(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConnectionProperty rename(String name) {
        return new ConnectionProperty(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConnectionProperty rename(Name name) {
        return new ConnectionProperty(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
