/*
 * This file is generated by jOOQ.
 */
package com.databasir.dao.tables;


import com.databasir.dao.Databasir;
import com.databasir.dao.Keys;
import com.databasir.dao.tables.records.ConnectionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Connection extends TableImpl<ConnectionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>databasir.connection</code>
     */
    public static final Connection CONNECTION = new Connection();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConnectionRecord> getRecordType() {
        return ConnectionRecord.class;
    }

    /**
     * The column <code>databasir.connection.id</code>.
     */
    public final TableField<ConnectionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>databasir.connection.schema_source_id</code>.
     */
    public final TableField<ConnectionRecord, Integer> SCHEMA_SOURCE_ID = createField(DSL.name("schema_source_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.connection.url</code>.
     */
    public final TableField<ConnectionRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>databasir.connection.username</code>.
     */
    public final TableField<ConnectionRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>databasir.connection.password</code>.
     */
    public final TableField<ConnectionRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>databasir.connection.update_at</code>.
     */
    public final TableField<ConnectionRecord, LocalDateTime> UPDATE_AT = createField(DSL.name("update_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>databasir.connection.create_at</code>.
     */
    public final TableField<ConnectionRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Connection(Name alias, Table<ConnectionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Connection(Name alias, Table<ConnectionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>databasir.connection</code> table reference
     */
    public Connection(String alias) {
        this(DSL.name(alias), CONNECTION);
    }

    /**
     * Create an aliased <code>databasir.connection</code> table reference
     */
    public Connection(Name alias) {
        this(alias, CONNECTION);
    }

    /**
     * Create a <code>databasir.connection</code> table reference
     */
    public Connection() {
        this(DSL.name("connection"), null);
    }

    public <O extends Record> Connection(Table<O> child, ForeignKey<O, ConnectionRecord> key) {
        super(child, key, CONNECTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Databasir.DATABASIR;
    }

    @Override
    public Identity<ConnectionRecord, Integer> getIdentity() {
        return (Identity<ConnectionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ConnectionRecord> getPrimaryKey() {
        return Keys.KEY_CONNECTION_PRIMARY;
    }

    @Override
    public List<UniqueKey<ConnectionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CONNECTION_UK_SCHEMA_SOURCE_ID);
    }

    @Override
    public Connection as(String alias) {
        return new Connection(DSL.name(alias), this);
    }

    @Override
    public Connection as(Name alias) {
        return new Connection(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Connection rename(String name) {
        return new Connection(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Connection rename(Name name) {
        return new Connection(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
