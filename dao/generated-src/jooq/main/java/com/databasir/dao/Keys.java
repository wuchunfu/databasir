/*
 * This file is generated by jOOQ.
 */
package com.databasir.dao;


import com.databasir.dao.tables.Connection;
import com.databasir.dao.tables.ConnectionProperty;
import com.databasir.dao.tables.Permission;
import com.databasir.dao.tables.Role;
import com.databasir.dao.tables.RolePermission;
import com.databasir.dao.tables.SchemaMeta;
import com.databasir.dao.tables.SchemaMetaHistory;
import com.databasir.dao.tables.SchemaSource;
import com.databasir.dao.tables.SchemaSourceMetaRule;
import com.databasir.dao.tables.SchemaSourceTag;
import com.databasir.dao.tables.TableColumnMeta;
import com.databasir.dao.tables.TableIndexMeta;
import com.databasir.dao.tables.TableMeta;
import com.databasir.dao.tables.TableTriggerMeta;
import com.databasir.dao.tables.Tag;
import com.databasir.dao.tables.User;
import com.databasir.dao.tables.UserRole;
import com.databasir.dao.tables.records.ConnectionPropertyRecord;
import com.databasir.dao.tables.records.ConnectionRecord;
import com.databasir.dao.tables.records.PermissionRecord;
import com.databasir.dao.tables.records.RolePermissionRecord;
import com.databasir.dao.tables.records.RoleRecord;
import com.databasir.dao.tables.records.SchemaMetaHistoryRecord;
import com.databasir.dao.tables.records.SchemaMetaRecord;
import com.databasir.dao.tables.records.SchemaSourceMetaRuleRecord;
import com.databasir.dao.tables.records.SchemaSourceRecord;
import com.databasir.dao.tables.records.SchemaSourceTagRecord;
import com.databasir.dao.tables.records.TableColumnMetaRecord;
import com.databasir.dao.tables.records.TableIndexMetaRecord;
import com.databasir.dao.tables.records.TableMetaRecord;
import com.databasir.dao.tables.records.TableTriggerMetaRecord;
import com.databasir.dao.tables.records.TagRecord;
import com.databasir.dao.tables.records.UserRecord;
import com.databasir.dao.tables.records.UserRoleRecord;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * databasir.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ConnectionRecord> KEY_CONNECTION_PRIMARY = Internal.createUniqueKey(Connection.CONNECTION, DSL.name("KEY_connection_PRIMARY"), new TableField[] { Connection.CONNECTION.ID }, true);
    public static final UniqueKey<ConnectionRecord> KEY_CONNECTION_UK_SCHEMA_SOURCE_ID = Internal.createUniqueKey(Connection.CONNECTION, DSL.name("KEY_connection_uk_schema_source_id"), new TableField[] { Connection.CONNECTION.SCHEMA_SOURCE_ID }, true);
    public static final UniqueKey<ConnectionPropertyRecord> KEY_CONNECTION_PROPERTY_PRIMARY = Internal.createUniqueKey(ConnectionProperty.CONNECTION_PROPERTY, DSL.name("KEY_connection_property_PRIMARY"), new TableField[] { ConnectionProperty.CONNECTION_PROPERTY.ID }, true);
    public static final UniqueKey<PermissionRecord> KEY_PERMISSION_PRIMARY = Internal.createUniqueKey(Permission.PERMISSION, DSL.name("KEY_permission_PRIMARY"), new TableField[] { Permission.PERMISSION.ID }, true);
    public static final UniqueKey<RoleRecord> KEY_ROLE_PRIMARY = Internal.createUniqueKey(Role.ROLE, DSL.name("KEY_role_PRIMARY"), new TableField[] { Role.ROLE.ID }, true);
    public static final UniqueKey<RoleRecord> KEY_ROLE_UK_NAME = Internal.createUniqueKey(Role.ROLE, DSL.name("KEY_role_uk_name"), new TableField[] { Role.ROLE.NAME }, true);
    public static final UniqueKey<RolePermissionRecord> KEY_ROLE_PERMISSION_PRIMARY = Internal.createUniqueKey(RolePermission.ROLE_PERMISSION, DSL.name("KEY_role_permission_PRIMARY"), new TableField[] { RolePermission.ROLE_PERMISSION.ID }, true);
    public static final UniqueKey<SchemaMetaRecord> KEY_SCHEMA_META_PRIMARY = Internal.createUniqueKey(SchemaMeta.SCHEMA_META, DSL.name("KEY_schema_meta_PRIMARY"), new TableField[] { SchemaMeta.SCHEMA_META.ID }, true);
    public static final UniqueKey<SchemaMetaRecord> KEY_SCHEMA_META_UK_SCHEMA_SOURCE_ID = Internal.createUniqueKey(SchemaMeta.SCHEMA_META, DSL.name("KEY_schema_meta_uk_schema_source_id"), new TableField[] { SchemaMeta.SCHEMA_META.SCHEMA_SOURCE_ID }, true);
    public static final UniqueKey<SchemaMetaHistoryRecord> KEY_SCHEMA_META_HISTORY_PRIMARY = Internal.createUniqueKey(SchemaMetaHistory.SCHEMA_META_HISTORY, DSL.name("KEY_schema_meta_history_PRIMARY"), new TableField[] { SchemaMetaHistory.SCHEMA_META_HISTORY.ID }, true);
    public static final UniqueKey<SchemaMetaHistoryRecord> KEY_SCHEMA_META_HISTORY_UK_CONNECTION_ID_VERSION = Internal.createUniqueKey(SchemaMetaHistory.SCHEMA_META_HISTORY, DSL.name("KEY_schema_meta_history_uk_connection_id_version"), new TableField[] { SchemaMetaHistory.SCHEMA_META_HISTORY.SCHEMA_META_ID, SchemaMetaHistory.SCHEMA_META_HISTORY.VERSION }, true);
    public static final UniqueKey<SchemaSourceRecord> KEY_SCHEMA_SOURCE_PRIMARY = Internal.createUniqueKey(SchemaSource.SCHEMA_SOURCE, DSL.name("KEY_schema_source_PRIMARY"), new TableField[] { SchemaSource.SCHEMA_SOURCE.ID }, true);
    public static final UniqueKey<SchemaSourceMetaRuleRecord> KEY_SCHEMA_SOURCE_META_RULE_PRIMARY = Internal.createUniqueKey(SchemaSourceMetaRule.SCHEMA_SOURCE_META_RULE, DSL.name("KEY_schema_source_meta_rule_PRIMARY"), new TableField[] { SchemaSourceMetaRule.SCHEMA_SOURCE_META_RULE.ID }, true);
    public static final UniqueKey<SchemaSourceMetaRuleRecord> KEY_SCHEMA_SOURCE_META_RULE_UK_SCHEMA_SOURCE_ID = Internal.createUniqueKey(SchemaSourceMetaRule.SCHEMA_SOURCE_META_RULE, DSL.name("KEY_schema_source_meta_rule_uk_schema_source_id"), new TableField[] { SchemaSourceMetaRule.SCHEMA_SOURCE_META_RULE.SCHEMA_SOURCE_ID }, true);
    public static final UniqueKey<SchemaSourceTagRecord> KEY_SCHEMA_SOURCE_TAG_PRIMARY = Internal.createUniqueKey(SchemaSourceTag.SCHEMA_SOURCE_TAG, DSL.name("KEY_schema_source_tag_PRIMARY"), new TableField[] { SchemaSourceTag.SCHEMA_SOURCE_TAG.ID }, true);
    public static final UniqueKey<SchemaSourceTagRecord> KEY_SCHEMA_SOURCE_TAG_UK_DATABASE_TAG = Internal.createUniqueKey(SchemaSourceTag.SCHEMA_SOURCE_TAG, DSL.name("KEY_schema_source_tag_uk_database_tag"), new TableField[] { SchemaSourceTag.SCHEMA_SOURCE_TAG.SCHEMA_SOURCE_ID, SchemaSourceTag.SCHEMA_SOURCE_TAG.TAG_ID }, true);
    public static final UniqueKey<TableColumnMetaRecord> KEY_TABLE_COLUMN_META_PRIMARY = Internal.createUniqueKey(TableColumnMeta.TABLE_COLUMN_META, DSL.name("KEY_table_column_meta_PRIMARY"), new TableField[] { TableColumnMeta.TABLE_COLUMN_META.ID }, true);
    public static final UniqueKey<TableIndexMetaRecord> KEY_TABLE_INDEX_META_PRIMARY = Internal.createUniqueKey(TableIndexMeta.TABLE_INDEX_META, DSL.name("KEY_table_index_meta_PRIMARY"), new TableField[] { TableIndexMeta.TABLE_INDEX_META.ID }, true);
    public static final UniqueKey<TableMetaRecord> KEY_TABLE_META_PRIMARY = Internal.createUniqueKey(TableMeta.TABLE_META, DSL.name("KEY_table_meta_PRIMARY"), new TableField[] { TableMeta.TABLE_META.ID }, true);
    public static final UniqueKey<TableTriggerMetaRecord> KEY_TABLE_TRIGGER_META_PRIMARY = Internal.createUniqueKey(TableTriggerMeta.TABLE_TRIGGER_META, DSL.name("KEY_table_trigger_meta_PRIMARY"), new TableField[] { TableTriggerMeta.TABLE_TRIGGER_META.ID }, true);
    public static final UniqueKey<TagRecord> KEY_TAG_PRIMARY = Internal.createUniqueKey(Tag.TAG, DSL.name("KEY_tag_PRIMARY"), new TableField[] { Tag.TAG.ID }, true);
    public static final UniqueKey<TagRecord> KEY_TAG_UK_NAME = Internal.createUniqueKey(Tag.TAG, DSL.name("KEY_tag_uk_name"), new TableField[] { Tag.TAG.NAME }, true);
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_PRIMARY"), new TableField[] { User.USER.ID }, true);
    public static final UniqueKey<UserRoleRecord> KEY_USER_ROLE_PRIMARY = Internal.createUniqueKey(UserRole.USER_ROLE, DSL.name("KEY_user_role_PRIMARY"), new TableField[] { UserRole.USER_ROLE.ID }, true);
}
