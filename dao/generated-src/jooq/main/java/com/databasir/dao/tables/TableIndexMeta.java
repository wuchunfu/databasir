/*
 * This file is generated by jOOQ.
 */
package com.databasir.dao.tables;


import com.databasir.dao.Databasir;
import com.databasir.dao.Keys;
import com.databasir.dao.tables.records.TableIndexMetaRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TableIndexMeta extends TableImpl<TableIndexMetaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>databasir.table_index_meta</code>
     */
    public static final TableIndexMeta TABLE_INDEX_META = new TableIndexMeta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TableIndexMetaRecord> getRecordType() {
        return TableIndexMetaRecord.class;
    }

    /**
     * The column <code>databasir.table_index_meta.id</code>.
     */
    public final TableField<TableIndexMetaRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>databasir.table_index_meta.table_meta_id</code>.
     */
    public final TableField<TableIndexMetaRecord, Integer> TABLE_META_ID = createField(DSL.name("table_meta_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.table_index_meta.schema_meta_id</code>.
     */
    public final TableField<TableIndexMetaRecord, Integer> SCHEMA_META_ID = createField(DSL.name("schema_meta_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.table_index_meta.name</code>.
     */
    public final TableField<TableIndexMetaRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>databasir.table_index_meta.is_primary</code>.
     */
    public final TableField<TableIndexMetaRecord, Boolean> IS_PRIMARY = createField(DSL.name("is_primary"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>databasir.table_index_meta.is_unique</code>.
     */
    public final TableField<TableIndexMetaRecord, Boolean> IS_UNIQUE = createField(DSL.name("is_unique"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>databasir.table_index_meta.column_name_array</code>.
     */
    public final TableField<TableIndexMetaRecord, JSON> COLUMN_NAME_ARRAY = createField(DSL.name("column_name_array"), SQLDataType.JSON.nullable(false), this, "");

    /**
     * The column <code>databasir.table_index_meta.create_at</code>.
     */
    public final TableField<TableIndexMetaRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private TableIndexMeta(Name alias, Table<TableIndexMetaRecord> aliased) {
        this(alias, aliased, null);
    }

    private TableIndexMeta(Name alias, Table<TableIndexMetaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>databasir.table_index_meta</code> table reference
     */
    public TableIndexMeta(String alias) {
        this(DSL.name(alias), TABLE_INDEX_META);
    }

    /**
     * Create an aliased <code>databasir.table_index_meta</code> table reference
     */
    public TableIndexMeta(Name alias) {
        this(alias, TABLE_INDEX_META);
    }

    /**
     * Create a <code>databasir.table_index_meta</code> table reference
     */
    public TableIndexMeta() {
        this(DSL.name("table_index_meta"), null);
    }

    public <O extends Record> TableIndexMeta(Table<O> child, ForeignKey<O, TableIndexMetaRecord> key) {
        super(child, key, TABLE_INDEX_META);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Databasir.DATABASIR;
    }

    @Override
    public Identity<TableIndexMetaRecord, Integer> getIdentity() {
        return (Identity<TableIndexMetaRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TableIndexMetaRecord> getPrimaryKey() {
        return Keys.KEY_TABLE_INDEX_META_PRIMARY;
    }

    @Override
    public TableIndexMeta as(String alias) {
        return new TableIndexMeta(DSL.name(alias), this);
    }

    @Override
    public TableIndexMeta as(Name alias) {
        return new TableIndexMeta(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TableIndexMeta rename(String name) {
        return new TableIndexMeta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TableIndexMeta rename(Name name) {
        return new TableIndexMeta(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Integer, String, Boolean, Boolean, JSON, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
