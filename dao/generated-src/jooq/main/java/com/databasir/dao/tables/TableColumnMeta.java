/*
 * This file is generated by jOOQ.
 */
package com.databasir.dao.tables;


import com.databasir.dao.Databasir;
import com.databasir.dao.Keys;
import com.databasir.dao.tables.records.TableColumnMetaRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TableColumnMeta extends TableImpl<TableColumnMetaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>databasir.table_column_meta</code>
     */
    public static final TableColumnMeta TABLE_COLUMN_META = new TableColumnMeta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TableColumnMetaRecord> getRecordType() {
        return TableColumnMetaRecord.class;
    }

    /**
     * The column <code>databasir.table_column_meta.id</code>.
     */
    public final TableField<TableColumnMetaRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>databasir.table_column_meta.table_meta_id</code>.
     */
    public final TableField<TableColumnMetaRecord, Integer> TABLE_META_ID = createField(DSL.name("table_meta_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.table_column_meta.schema_meta_id</code>.
     */
    public final TableField<TableColumnMetaRecord, Integer> SCHEMA_META_ID = createField(DSL.name("schema_meta_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.table_column_meta.name</code>.
     */
    public final TableField<TableColumnMetaRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>databasir.table_column_meta.type</code>.
     */
    public final TableField<TableColumnMetaRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>databasir.table_column_meta.comment</code>.
     */
    public final TableField<TableColumnMetaRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>databasir.table_column_meta.default_value</code>.
     */
    public final TableField<TableColumnMetaRecord, String> DEFAULT_VALUE = createField(DSL.name("default_value"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>databasir.table_column_meta.size</code>.
     */
    public final TableField<TableColumnMetaRecord, Integer> SIZE = createField(DSL.name("size"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.table_column_meta.decimal_digits</code>.
     */
    public final TableField<TableColumnMetaRecord, Integer> DECIMAL_DIGITS = createField(DSL.name("decimal_digits"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.table_column_meta.is_nullable</code>.
     */
    public final TableField<TableColumnMetaRecord, Boolean> IS_NULLABLE = createField(DSL.name("is_nullable"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>databasir.table_column_meta.is_auto_increment</code>.
     */
    public final TableField<TableColumnMetaRecord, Boolean> IS_AUTO_INCREMENT = createField(DSL.name("is_auto_increment"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>databasir.table_column_meta.create_at</code>.
     */
    public final TableField<TableColumnMetaRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private TableColumnMeta(Name alias, Table<TableColumnMetaRecord> aliased) {
        this(alias, aliased, null);
    }

    private TableColumnMeta(Name alias, Table<TableColumnMetaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>databasir.table_column_meta</code> table
     * reference
     */
    public TableColumnMeta(String alias) {
        this(DSL.name(alias), TABLE_COLUMN_META);
    }

    /**
     * Create an aliased <code>databasir.table_column_meta</code> table
     * reference
     */
    public TableColumnMeta(Name alias) {
        this(alias, TABLE_COLUMN_META);
    }

    /**
     * Create a <code>databasir.table_column_meta</code> table reference
     */
    public TableColumnMeta() {
        this(DSL.name("table_column_meta"), null);
    }

    public <O extends Record> TableColumnMeta(Table<O> child, ForeignKey<O, TableColumnMetaRecord> key) {
        super(child, key, TABLE_COLUMN_META);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Databasir.DATABASIR;
    }

    @Override
    public Identity<TableColumnMetaRecord, Integer> getIdentity() {
        return (Identity<TableColumnMetaRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TableColumnMetaRecord> getPrimaryKey() {
        return Keys.KEY_TABLE_COLUMN_META_PRIMARY;
    }

    @Override
    public TableColumnMeta as(String alias) {
        return new TableColumnMeta(DSL.name(alias), this);
    }

    @Override
    public TableColumnMeta as(Name alias) {
        return new TableColumnMeta(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TableColumnMeta rename(String name) {
        return new TableColumnMeta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TableColumnMeta rename(Name name) {
        return new TableColumnMeta(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, Integer, Integer, String, String, String, String, Integer, Integer, Boolean, Boolean, LocalDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
