/*
 * This file is generated by jOOQ.
 */
package com.databasir.api.persist.tables;


import com.databasir.api.persist.Databasir;
import com.databasir.api.persist.Keys;
import com.databasir.api.persist.tables.records.SchemaSourceRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemaSource extends TableImpl<SchemaSourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>databasir.schema_source</code>
     */
    public static final SchemaSource SCHEMA_SOURCE = new SchemaSource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchemaSourceRecord> getRecordType() {
        return SchemaSourceRecord.class;
    }

    /**
     * The column <code>databasir.schema_source.id</code>.
     */
    public final TableField<SchemaSourceRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>databasir.schema_source.title</code>.
     */
    public final TableField<SchemaSourceRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>databasir.schema_source.description</code>.
     */
    public final TableField<SchemaSourceRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>databasir.schema_source.database_type</code>.
     */
    public final TableField<SchemaSourceRecord, String> DATABASE_TYPE = createField(DSL.name("database_type"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("UNKNOWN", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>databasir.schema_source.schema_name</code>.
     */
    public final TableField<SchemaSourceRecord, String> SCHEMA_NAME = createField(DSL.name("schema_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>databasir.schema_source.deleted</code>.
     */
    public final TableField<SchemaSourceRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>databasir.schema_source.create_at</code>.
     */
    public final TableField<SchemaSourceRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private SchemaSource(Name alias, Table<SchemaSourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private SchemaSource(Name alias, Table<SchemaSourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>databasir.schema_source</code> table reference
     */
    public SchemaSource(String alias) {
        this(DSL.name(alias), SCHEMA_SOURCE);
    }

    /**
     * Create an aliased <code>databasir.schema_source</code> table reference
     */
    public SchemaSource(Name alias) {
        this(alias, SCHEMA_SOURCE);
    }

    /**
     * Create a <code>databasir.schema_source</code> table reference
     */
    public SchemaSource() {
        this(DSL.name("schema_source"), null);
    }

    public <O extends Record> SchemaSource(Table<O> child, ForeignKey<O, SchemaSourceRecord> key) {
        super(child, key, SCHEMA_SOURCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Databasir.DATABASIR;
    }

    @Override
    public Identity<SchemaSourceRecord, Integer> getIdentity() {
        return (Identity<SchemaSourceRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SchemaSourceRecord> getPrimaryKey() {
        return Keys.KEY_SCHEMA_SOURCE_PRIMARY;
    }

    @Override
    public SchemaSource as(String alias) {
        return new SchemaSource(DSL.name(alias), this);
    }

    @Override
    public SchemaSource as(Name alias) {
        return new SchemaSource(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemaSource rename(String name) {
        return new SchemaSource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemaSource rename(Name name) {
        return new SchemaSource(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, Boolean, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
