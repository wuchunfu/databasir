/*
 * This file is generated by jOOQ.
 */
package com.databasir.api.persist.tables;


import com.databasir.api.persist.Databasir;
import com.databasir.api.persist.Keys;
import com.databasir.api.persist.tables.records.SchemaMetaRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemaMeta extends TableImpl<SchemaMetaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>databasir.schema_meta</code>
     */
    public static final SchemaMeta SCHEMA_META = new SchemaMeta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchemaMetaRecord> getRecordType() {
        return SchemaMetaRecord.class;
    }

    /**
     * The column <code>databasir.schema_meta.id</code>.
     */
    public final TableField<SchemaMetaRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>databasir.schema_meta.schema_source_id</code>.
     */
    public final TableField<SchemaMetaRecord, Integer> SCHEMA_SOURCE_ID = createField(DSL.name("schema_source_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.schema_meta.name</code>.
     */
    public final TableField<SchemaMetaRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>databasir.schema_meta.product_name</code>.
     */
    public final TableField<SchemaMetaRecord, String> PRODUCT_NAME = createField(DSL.name("product_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>databasir.schema_meta.product_version</code>.
     */
    public final TableField<SchemaMetaRecord, String> PRODUCT_VERSION = createField(DSL.name("product_version"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>databasir.schema_meta.version</code>.
     */
    public final TableField<SchemaMetaRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>databasir.schema_meta.update_at</code>.
     */
    public final TableField<SchemaMetaRecord, LocalDateTime> UPDATE_AT = createField(DSL.name("update_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>databasir.schema_meta.create_at</code>.
     */
    public final TableField<SchemaMetaRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private SchemaMeta(Name alias, Table<SchemaMetaRecord> aliased) {
        this(alias, aliased, null);
    }

    private SchemaMeta(Name alias, Table<SchemaMetaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>databasir.schema_meta</code> table reference
     */
    public SchemaMeta(String alias) {
        this(DSL.name(alias), SCHEMA_META);
    }

    /**
     * Create an aliased <code>databasir.schema_meta</code> table reference
     */
    public SchemaMeta(Name alias) {
        this(alias, SCHEMA_META);
    }

    /**
     * Create a <code>databasir.schema_meta</code> table reference
     */
    public SchemaMeta() {
        this(DSL.name("schema_meta"), null);
    }

    public <O extends Record> SchemaMeta(Table<O> child, ForeignKey<O, SchemaMetaRecord> key) {
        super(child, key, SCHEMA_META);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Databasir.DATABASIR;
    }

    @Override
    public Identity<SchemaMetaRecord, Integer> getIdentity() {
        return (Identity<SchemaMetaRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SchemaMetaRecord> getPrimaryKey() {
        return Keys.KEY_SCHEMA_META_PRIMARY;
    }

    @Override
    public List<UniqueKey<SchemaMetaRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SCHEMA_META_UK_SCHEMA_SOURCE_ID);
    }

    @Override
    public SchemaMeta as(String alias) {
        return new SchemaMeta(DSL.name(alias), this);
    }

    @Override
    public SchemaMeta as(Name alias) {
        return new SchemaMeta(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemaMeta rename(String name) {
        return new SchemaMeta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemaMeta rename(Name name) {
        return new SchemaMeta(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, String, String, String, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
